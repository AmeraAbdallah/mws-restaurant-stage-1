const dbPromise=idb.open("restaurantDb",3,e=>{switch(e.oldVersion){case 0:e.createObjectStore("restaurants");case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant","restaurant_id");case 2:e.createObjectStore("off_reviews").createIndex("restaurant","restaurant_id")}});function addToOffReviewsOS(e){dbPromise.then(t=>{const r=t.transaction("off_reviews","readwrite"),o=r.objectStore("off_reviews");return Array.isArray(e)?e.forEach(e=>{o.put(e,e.comments)}):o.put(e,e.comments),r.complete}).then(()=>{console.log("added Items to review  store :) ")}).catch(e=>{console.log(e)})}function getFromOffReviewsOS(e){return new Promise(function(t,r){dbPromise.then(t=>{const r=t.transaction("off_reviews","readwrite").objectStore("off_reviews").index("restaurant").getAll(e);return console.log("get items from store .."),r}).then(e=>{e?(console.log("get items from store .."),t(e)):r("no reviews"),console.log(e)}).catch(e=>{r("no data"),console.log(e)})})}function clearOffReviewsOS(){dbPromise.then(e=>{const t=e.transaction("off_reviews","readwrite"),r=t.objectStore("off_reviews");r.index("restaurant");return r.clear(),t.complete}).then(()=>{console.log("cleared")}).catch(e=>{console.log(e)})}function addToReviewsOS(e){dbPromise.then(t=>{const r=t.transaction("reviews","readwrite"),o=r.objectStore("reviews");return Array.isArray(e)?e.forEach(e=>{o.put(e)}):o.put(e,"reviews"),r.complete}).then(()=>{console.log("added Items to review  store :) ")}).catch(e=>{console.log(e)})}function getFromReviewsOS(e){return new Promise(function(t,r){dbPromise.then(t=>{const r=t.transaction("reviews","readwrite").objectStore("reviews").index("restaurant").getAll(e);return console.log("get items from store .."),r}).then(e=>{e?(console.log("get items from store .."),t(e)):r("no reviews"),console.log(e)}).catch(e=>{r("no data"),console.log(e)})})}function addToRestaurantOS(e){dbPromise.then(t=>{const r=t.transaction("restaurants","readwrite");return r.objectStore("restaurants").put(e,"restaurants"),r.complete}).then(()=>{}).catch(e=>{console.log(e)})}function getFromRestaurantOS(){return new Promise(function(e,t){dbPromise.then(e=>{return e.transaction("restaurants","readwrite").objectStore("restaurants").get("restaurants")}).then(r=>{r?e(r):t("no data")}).catch(e=>{t("no data"),console.log(e)})})}