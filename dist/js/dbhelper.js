class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static fetchRestaurants(e){fetch(`${DBHelper.DATABASE_URL}/restaurants`).then(e=>e.json()).then(t=>{addToRestaurantOS(t),e(null,t)}).catch(t=>{getFromRestaurantOS().then(t=>{e(null,t)}).catch(t=>{e(t,null)})})}static fetchReviewsByRestId(e){return new Promise((t,n)=>{fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${e}`).then(e=>(console.log("fetched"),e.json())).then(e=>{addToReviewsOS(e),t(e)}).catch(a=>{console.log(`Request failed. Reviews failed fetched .. ${a}`),getFromReviewsOS(e).then(e=>{t(e)}).catch(e=>{n(e)})})})}static sendReviewsWhenOnline(e){addToOffReviewsOS(e),window.addEventListener("online",t=>{console.log("online"),getFromOffReviewsOS(e.restaurant_id).then(e=>{e.map(e=>{DBHelper.addReview(e)})}).catch(e=>{});let n=document.querySelectorAll(".offline");[].forEach.call(n,function(e){e.classList.remove("offline")}),clearOffReviewsOS()})}static addReview(e){if(!navigator.onLine)return console.log("offline"),void DBHelper.sendReviewsWhenOnline(e);let t={restaurant_id:e.restaurant_id,name:e.name,rating:e.rating,comments:e.comments};fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>{}).catch(e=>console.error("Error:",e))}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((a,s)=>{if(a)n(a,null);else{let a=s;"all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),n(null,a)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),a=t.filter((e,n)=>t.indexOf(e)==n);e(null,a)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),a=t.filter((e,n)=>t.indexOf(e)==n);e(null,a)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return 10===e.id?"/dist/img/10.jpg":`/dist/img/${e.photograph}.jpg`}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return n.addTo(newMap),n}static handleFavouriteWheneOffline(e,t){window.addEventListener("online",n=>{DBHelper.handleFavourite(e,t)})}static handleFavourite(e,t){fetch(`${DBHelper.DATABASE_URL}/restaurants/${t.id}/?is_favorite=${e}`,{method:"PUT"}).then(e=>e.json()).then(e=>{updateFavoriteRestaurantOS(t),console.log("test "+e).stringify()}).catch(e=>{const t=`Request failed. Returned status of ${e}`;console.log(t)})}}